{"version":3,"sources":["components/Prime/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Prime","useState","inputNumber","setInputNumber","gridArr","setGridArr","primeNumber","setPrimeNumber","messageStatus","setMessageStatus","isNumberPrime","value","i","className","placeholder","type","onChange","e","parseInt","target","onClick","primeNum","numArr","push","checkInput","map","num","style","background","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNA+EeA,EA7ED,WAAO,IAAD,EACoBC,mBAAiB,GADrC,mBACXC,EADW,KACEC,EADF,OAEYF,mBAAmB,IAF/B,mBAEXG,EAFW,KAEFC,EAFE,OAGoBJ,mBAAwB,MAH5C,mBAGXK,EAHW,KAGEC,EAHF,OAIwBN,mBAAwB,MAJhD,mBAIXO,EAJW,KAIIC,EAJJ,KASZC,EAAgB,SAAhBA,EAAiBC,GAErB,GAAc,IAAVA,EACF,OAAO,KAIT,GAAIA,EAAQ,EACV,OAAO,KAMT,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOC,IACzB,GAAID,EAAQC,IAAM,EACd,OAAOF,EAAcC,EAAM,GAIjC,OAAOA,GA2BT,OACE,sBAAKE,UAAU,YAAf,UACE,oBAAIA,UAAU,OAAd,sCACA,mBAAGA,UAAU,cAAb,kGACA,uBACEC,YAAY,IACZC,KAAK,SACLJ,MAAOT,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAee,SAASD,EAAEE,OAAOR,WACpD,wBAAQS,QAAS,kBA9BF,SAACT,GAClB,IAAMU,EAAWX,EAAcC,EAAM,GAErC,GAAc,IAAVA,GAAeA,EAAS,EAAG,CAE7B,IADA,IAAMW,EAAmB,GAChBV,EAAE,EAAGA,EAAID,EAAOC,IACvBU,EAAOC,KAAKX,EAAE,GAEhBP,EAAWiB,QAEXjB,EAAW,IAGb,GAAiB,OAAbgB,EACF,OAAOZ,EAAiB,uDAG1BA,EAAiB,GAAD,OAAIY,EAAJ,0CAChBd,EAAec,GAYUG,CAAWtB,IAAlC,mBACCM,GAAiB,mBAAGK,UAAU,SAAb,SAAuBL,IAEzC,qBAAKK,UAAU,aAAf,SACGT,EAAQqB,KAAI,SAACC,GAAD,OACX,qBAAeb,UAAU,OAAOc,MAAO,CAAEC,WAAYF,IAAQpB,EAAc,UAAY,eAAvF,SAAyGoB,GAA/FA,YC5DLG,EARH,WACV,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,EAAD,OCOSiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.414e278e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Prime = () => {\r\n  const [inputNumber, setInputNumber] = useState<number>(0)\r\n  const [gridArr, setGridArr] = useState<number[]>([])\r\n  const [primeNumber, setPrimeNumber] = useState<number | null>(null)\r\n  const [messageStatus, setMessageStatus] = useState<null | string>(null)\r\n\r\n  // This is a recursive function checking the value starting\r\n  // from the input value and subtracting by one until we find\r\n  // The nearest prime value.\r\n  const isNumberPrime = (value: number): null | number => {\r\n    // If the value passed is 1 return false it's not prime.\r\n    if (value === 1) {\r\n      return null\r\n    }\r\n\r\n    // If the value is less than one return false it's not a prime number\r\n    if (value < 1) {\r\n      return null\r\n    }\r\n\r\n    // Check if this number is prime or not\r\n    // If this value is not a prime number lets run \r\n    // the function again but with smaller value and see if thats a prime\r\n    for (let i = 2; i < value; i++) {\r\n      if (value % i === 0) {\r\n          return isNumberPrime(value-1)\r\n      }\r\n  }\r\n\r\n    return value\r\n  }\r\n\r\n  // Ran when the user clicks submit button\r\n  // We get the initial value from input start checking for lower primes\r\n  // And then we generate the grid to display to the user which prime number they got.\r\n  const checkInput = (value: number) => {\r\n    const primeNum = isNumberPrime(value-1)\r\n\r\n    if (value !== 1 || value !< 1) {\r\n      const numArr: number[] = []\r\n      for (let i=0; i < value; i++) {\r\n        numArr.push(i+1)\r\n      }\r\n      setGridArr(numArr)\r\n    } else {\r\n      setGridArr([])\r\n    }\r\n\r\n    if (primeNum === null) {\r\n      return setMessageStatus(`Could not find any prime numbers before your input.`)\r\n    }\r\n\r\n    setMessageStatus(`${primeNum} is the first prime before your input`)\r\n    setPrimeNumber(primeNum)\r\n  }\r\n\r\n  return (\r\n    <div className=\"prime-box\">\r\n      <h1 className=\"info\">Find Nearst Prime Number</h1>\r\n      <p className=\"description\">Enter a value below and we will find the highest prime number lower than your input.</p>\r\n      <input \r\n        placeholder=\"0\" \r\n        type=\"number\" \r\n        value={inputNumber} \r\n        onChange={(e) => setInputNumber(parseInt(e.target.value))} />\r\n      <button onClick={() => checkInput(inputNumber)}>Check</button>\r\n      {messageStatus && <p className=\"status\">{messageStatus}</p>}\r\n\r\n      <div className=\"prime-grid\">\r\n        {gridArr.map((num) => (\r\n          <div key={num} className=\"node\" style={{ background: num === primeNumber ? \"#a0ff8b\" : \"transparent\" }}>{num}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Prime;","import React from \"react\";\nimport \"./assets/styles/main.scss\";\nimport Prime from \"./components/Prime\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Prime />\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}